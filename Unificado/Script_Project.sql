/* CADA GRUPO DEBE DE SUBIR EL DIAGRAMA DE LA BASE DE DATOS CON SU SCRIPT */

CREATE USER HOSPITAL IDENTIFIED BY HOSPITAL;
GRANT CREATE SESSION TO HOSPITAL;
GRANT CREATE TABLE TO HOSPITAL;
GRANT CREATE VIEW TO HOSPITAL;
GRANT CREATE PROCEDURE TO HOSPITAL;

ALTER USER HOSPITAL quota unlimited on SYSTEM;

/* -------------------------------------
   TABLAS GENERALES
----------------------------------------*/

CREATE TABLE HOSPITAL.HPTL_PERSONAS(
        ID INTEGER NOT NULL,
        PRIMER_NOMBRE VARCHAR2(60) NOT NULL,
        SEGUNDO_NOMBRE VARCHAR2(60),
        TERCER_NOMBRE VARCHAR2(60),
        PRIMER_APELLIDO VARCHAR2(60) NOT NULL,
        SEGUNDO_APELLIDO VARCHAR2(60),
        APELLIDO_CASADA VARCHAR2(60),
        FECHA_NACIMIENTO DATE,
        SEXO CHAR(1),
		EMAIL VARCHAR2(128),
		VERSION NUMERIC(5,0) NOT NULL,
        CONSTRAINT HPTL_PERSONAS_PK PRIMARY KEY (ID)
);


CREATE TABLE HOSPITAL.HPTL_TELEFONOS(
        ID INTEGER NOT NULL,
        DESCRIPCION VARCHAR2(60),
        TELEFONO VARCHAR(30),
		VERSION NUMERIC(5,0) NOT NULL,
        CONSTRAINT HPTL_TELEFONOS_PK PRIMARY KEY(ID)
);


CREATE TABLE HOSPITAL.HPTL_PERSONAS_TELEFONOS(
        PERSONAS_ID INTEGER NOT NULL,
        TELEFONOS_ID INTEGER NOT NULL,
        CONSTRAINT HPTL_PERSONAS_TELEFONOS_UK UNIQUE (PERSONAS_ID,TELEFONOS_ID),
        CONSTRAINT HPTL_PER_PK_HPTL_PER_TEL_FK FOREIGN KEY(PERSONAS_ID) REFERENCES HOSPITAL.HPTL_PERSONAS(ID),
        CONSTRAINT HPTL_TEL_PK_HPTL_PER_TEL_FK FOREIGN KEY(TELEFONOS_ID) REFERENCES HOSPITAL.HPTL_TELEFONOS(ID)
);

CREATE TABLE HOSPITAL.HPTL_TIPO_SANGRE (
		ID INTEGER NOT NULL,
		TIPOSANGRE VARCHAR(20),
		VERSION NUMERIC(5,0) NOT NULL,
		CONSTRAINT HPTL_TIPO_SANGRE_PK PRIMARY KEY (ID)
);

CREATE TABLE HOSPITAL.HPTL_PACIENTES(
        ID INTEGER NOT NULL,
        CODIGO_PACIENTE INTEGER NOT NULL,
        FECHA_REGISTO_PACIENTE DATE,
        PERSONAS_ID INTEGER NOT NULL,
		TIPOSANGRE_ID INTEGER,
		VERSION NUMERIC(5,0) NOT NULL,
        CONSTRAINT HPTL_PACIENTES_PK PRIMARY KEY(ID),
        CONSTRAINT HPTL_PERSONA_PK_HPTL_PAC_FK FOREIGN KEY(PERSONAS_ID) REFERENCES HOSPITAL.HPTL_PERSONAS(ID),
		CONSTRAINT HPTL_TIPO_SAN_PK_HPTL_PAC_FK FOREIGN KEY (TIPOSANGRE_ID) REFERENCES HOSPITAL.HPTL_TIPO_SANGRE(ID)
);


CREATE TABLE HOSPITAL.HPTL_EMPLEADOS(
        ID INTEGER NOT NULL,
        CODIGO_EMPLEADO VARCHAR2(20),
        FECHA_INICIO_LABORES DATE,
        PERSONAS_ID INTEGER NOT NULL,
		VERSION NUMERIC(5,0) NOT NULL,
        CONSTRAINT HPTL_EMPLEADOS_PK PRIMARY KEY (ID),
        CONSTRAINT HPTL_PERSONAS_PK_HPTL_EMP_PK FOREIGN KEY(PERSONAS_ID) REFERENCES HOSPITAL.HPTL_PERSONAS(ID)
);



CREATE TABLE HOSPITAL.HPTL_DOCTORES(
        ID INTEGER NOT NULL,
        COLEGIADO VARCHAR2(20) NOT NULL,
        EMPLEADOS_ID INTEGER NOT NULL,
		VERSION NUMERIC(5,0) NOT NULL,
        CONSTRAINT HPTL_DOCTORES_PK PRIMARY KEY (ID),
        CONSTRAINT HPTL_EMPLEADOS_PK_HPTL_DOC_FK FOREIGN KEY(EMPLEADOS_ID) REFERENCES HOSPITAL.HPTL_PERSONAS(ID)
);


CREATE TABLE HOSPITAL.HPTL_ESPECIALIDADES_DOC(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(10),
	DESCRIPCION VARCHAR2(256),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_ESPECIALIDADES_DOC_PK PRIMARY KEY (ID)
);


CREATE TABLE HOSPITAL.HPTL_DOC_ESPECIALIDAD_DOC(
	--ID INTEGER NOT NULL,
	DOCTORES_ID INTEGER NOT NULL,
	ESPECIALIDADES_DOCTORES INTEGER NOT NULL,
	--CONSTRAINT HPTL_DOCTORES_ESP_DOC_PK PRIMARY KEY(ID),
	CONSTRAINT HPTL_DOCTORES_ESP_DOC_PK UNIQUE (DOCTORES_ID,ESPECIALIDADES_DOCTORES),
	CONSTRAINT HPTL_DOC_PK_DOC_ESP_DOC_FK FOREIGN KEY(DOCTORES_ID) REFERENCES HOSPITAL.HPTL_DOCTORES(ID),
	CONSTRAINT HPTL_ESP_DOC_PK_HTPL_DOC_FK FOREIGN KEY(ESPECIALIDADES_DOCTORES) REFERENCES HOSPITAL.HPTL_ESPECIALIDADES_DOC(ID)
);


CREATE TABLE HOSPITAL.HPTL_PUESTOS(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(10) NOT NULL,
	DESCRIPCION VARCHAR2(256),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_PUESTOS_PK PRIMARY KEY (ID)
);


CREATE TABLE HOSPITAL.HPTL_EMPLEADOS_PUESTOS(
	--ID INTEGER NOT NULL,
	EMPLEADOS_ID INTEGER NOT NULL,
	PUESTOS_ID INTEGER NOT NULL,
	--CONSTRAINT HPTL_EMPLEADOS_PUESTOS_PK PRIMARY KEY (ID),
	CONSTRAINT HPTL_EMPLEADOS_PUESTOS_UK UNIQUE (EMPLEADOS_ID,PUESTOS_ID),
	CONSTRAINT HPTL_PUE_PK_HPTL_EMP_PUE_FK FOREIGN KEY(PUESTOS_ID) REFERENCES HOSPITAL.HPTL_PUESTOS(ID),
	CONSTRAINT HPTL_EMP_PK_HPTL_EMP_PUE_FK FOREIGN KEY(EMPLEADOS_ID) REFERENCES HOSPITAL.HPTL_EMPLEADOS(ID)
);


CREATE TABLE HOSPITAL.HPTL_AREAS(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(10),
	DESCRIPCION VARCHAR2(256),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_AREAS_PK PRIMARY KEY(ID)
);

CREATE TABLE HOSPITAL.HPTL_PUESTOS_AREAS(
	--ID INTEGER NOT NULL,
	PUESTOS_ID INTEGER NOT NULL,
	AREAS_ID INTEGER NOT NULL,
	--CONSTRAINT HPTL_PUESTOS_AREAS_PK PRIMARY KEY (ID),
	CONSTRAINT HPTL_PUESTOS_AREAS_UK UNIQUE (PUESTOS_ID,AREAS_ID),
	CONSTRAINT HPTL_AREAS_PK_HPTL_PUE_ARE_FK FOREIGN KEY(AREAS_ID) REFERENCES HOSPITAL.HPTL_AREAS(ID),
	CONSTRAINT HPTL_PUE_PK_HPTL_PUE_ARE_FK FOREIGN KEY(PUESTOS_ID) REFERENCES HOSPITAL.HPTL_PUESTOS(ID)
);


CREATE TABLE HOSPITAL.HPTL_HORARIOS(
	ID INTEGER NOT NULL,
	HORA_INICIO DATE NOT NULL,
	HORA_FIN DATE NOT NULL,
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_HORARIOS_PK PRIMARY KEY (ID)
);
---MORE

CREATE TABLE HOSPITAL.HPTL_TIPO_ENFERMEDADES(
	ID INTEGER NOT NULL,
	CODIGO INTEGER NOT NULL,
	DESCRIPCION VARCHAR2(50),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HTPTL_TIPO_ENFERMEDADES_PK PRIMARY KEY(ID)

);

CREATE TABLE HOSPITAL.HPTL_ENFERMEDADES(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(20) NOT NULL,
	TIPOS_ENFERMEDADES_ID INTEGER NOT NULL,	
	DESCRIPCION VARCHAR2(50),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_ENFERMEDADES_PK PRIMARY KEY(ID),
	CONSTRAINT HPTL_ENF_PK_HPTL_TIP_ENF_FK FOREIGN KEY(TIPOS_ENFERMEDADES_ID) REFERENCES HOSPITAL.HPTL_TIPO_ENFERMEDADES(ID)	
);


CREATE TABLE HOSPITAL.HPTL_PAISES(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(15) NOT NULL,
	DESCRIPCION VARCHAR2(30),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_PAISES_PK PRIMARY KEY(ID)
);

CREATE TABLE HOSPITAL.HPTL_DEPARTAMENTOS(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(15) NOT NULL,
	DESCRIPCION VARCHAR2(50),
	PAIS_ID INTEGER NOT NULL,
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_DEPARTAMENTOS_PK PRIMARY KEY(ID),
	CONSTRAINT HTPTL_PAISES_FK_DEP FOREIGN KEY(PAIS_ID) REFERENCES HOSPITAL.HPTL_PAISES(ID)
);

CREATE TABLE HOSPITAL.HPTL_MUNICIPIOS(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(15) NOT NULL,
	DESCRIPCION VARCHAR2(50),
	DEPARTAMENTO_ID INTEGER NOT NULL,
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_MUNICIPIOS_PK PRIMARY KEY(ID),
	CONSTRAINT HPTL_DEPARTAMENTOS_FK_MUN FOREIGN KEY(DEPARTAMENTO_ID) REFERENCES HOSPITAL.HPTL_DEPARTAMENTOS(ID)
);

CREATE TABLE HOSPITAL.HPTL_DIRECCIONES(
	ID INTEGER NOT NULL,
	NUMERO_CASA VARCHAR2(10),
	COLONIA VARCHAR2(50),
	CALLE_AVENIDA VARCHAR2(50),
	MUNICIPIO_ID INTEGER NOT NULL,
	ZONA INTEGER,
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_DIRECCIONES_PK PRIMARY KEY(ID),
	CONSTRAINT HTPL_MUN_FK_DIRECCIONES FOREIGN KEY(MUNICIPIO_ID) REFERENCES HOSPITAL.HPTL_MUNICIPIOS(ID)
); 

CREATE TABLE HOSPITAL.HPTL_DIRE_PERSONA(
	DIRECCION_ID INTEGER,
	PERSONA_ID INTEGER,
	CONSTRAINT HPTL_DIREPERS_UK UNIQUE(DIRECCION_ID,PERSONA_ID),
	CONSTRAINT HPTL_DIR_PK_DIRE_FK FOREIGN KEY(DIRECCION_ID) REFERENCES HOSPITAL.HPTL_DIRECCIONES(ID),
	CONSTRAINT HTPL_PER_PK_PERS_FK FOREIGN KEY(PERSONA_ID) REFERENCES HOSPITAL.HPTL_PERSONAS(ID)
); 

CREATE TABLE HOSPITAL.HPTL_CLINICAS(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(30) NOT NULL,
	DESCRIPCION VARCHAR2(50),
	DIRECCIONES_ID INTEGER NOT NULL,
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_CLINICAS_PK PRIMARY KEY(ID),
	CONSTRAINT HPTL_DIR_PK_HPTL_CLI_FK FOREIGN KEY(DIRECCIONES_ID) REFERENCES HOSPITAL.HPTL_DIRECCIONES(ID)
);


CREATE TABLE HOSPITAL.HPTL_MEDICAMENTOS(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(30) NOT NULL,
	DESCRIPCION VARCHAR2(30),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_MEDICAMENTOS_PK PRIMARY KEY(ID)
);

CREATE TABLE HOSPITAL.HPTL_TIPOS_EXAMENES(
	ID INTEGER NOT NULL,
	DESCRIPCION VARCHAR2(50),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_TIPOS_ENFERMEDADES_PK PRIMARY KEY(ID)
);


CREATE TABLE HOSPITAL.HPTL_EXAMENES(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(30) NOT NULL,
	TIPOS_EXAMENES_ID INTEGER NOT NULL,
	DESCRIPCION VARCHAR2(30),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_EXAMENES_PK PRIMARY KEY(ID),
	CONSTRAINT HPTL_EX_HPTL_TIPOS_ENF_FK FOREIGN KEY(TIPOS_EXAMENES_ID) REFERENCES HOSPITAL.HPTL_TIPOS_EXAMENES(ID)	
);


CREATE TABLE HOSPITAL.HPTL_TIPOS_EQUIPOS(
	ID INTEGER NOT NULL,
	EQUIPOS_ID INTEGER NOT NULL,
	DESCRIPCION VARCHAR2(50),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_TIPOS_EQUIPOS_PK PRIMARY KEY(ID)
);


CREATE TABLE HOSPITAL.HPTL_EQUIPOS(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(30) NOT NULL,
	TIPO_EQUIPOS_ID INTEGER NOT NULL,
	DESCRIPCION VARCHAR2(30),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_EQUIPOS_PK PRIMARY KEY(ID),
	CONSTRAINT HPTL_EQ_PK_HPTL_TIP_ENF_FK FOREIGN KEY(TIPO_EQUIPOS_ID) REFERENCES HOSPITAL.HPTL_TIPOS_EQUIPOS(ID)	
);


CREATE TABLE HOSPITAL.HPTL_TIPO_DOCUMENTOS(
	ID INTEGER NOT NULL,
	CODIGO VARCHAR2(15) NOT NULL,
	DESCRIPCION VARCHAR2(30),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_DOCUMENTO_PK PRIMARY KEY(ID)
);

CREATE TABLE HOSPITAL.HPTL_DOCUMENTOS(
	ID INTEGER NOT NULL,
	TIPO_DOCUMENTO_ID INTEGER,
	NUMERO_DOCUMENTO VARCHAR2(20),
	VERSION NUMERIC(5,0) NOT NULL,
	CONSTRAINT HPTL_NUDOCUMENTO_PK PRIMARY KEY(ID),
	CONSTRAINT HPTL_TDOC_PK_HPTL_TDOC_FK FOREIGN KEY(TIPO_DOCUMENTO_ID) REFERENCES HOSPITAL.HPTL_TIPO_DOCUMENTOS(ID)
);


CREATE TABLE HOSPITAL.HPTL_PERSONA_DOCTO(
        PERSONAS_ID INTEGER NOT NULL,
        DOCUMENTO_ID INTEGER NOT NULL,
        CONSTRAINT HPTL_PERSONAS_DOCTO_UK UNIQUE (PERSONAS_ID,DOCUMENTO_ID),
        CONSTRAINT HPTL_PER_PK_HPTL_PER_DOC_FK FOREIGN KEY(PERSONAS_ID) REFERENCES HOSPITAL.HPTL_PERSONAS(ID),
        CONSTRAINT HPTL_TIP_PK_HPTL_PER_DOC_FK FOREIGN KEY(DOCUMENTO_ID) REFERENCES HOSPITAL.HPTL_DOCUMENTOS(ID)
);

CREATE TABLE HOSPITAL.HPTL_CLINICA_DOCTOR(
	DOCTOR_ID INTEGER,
	CLINICA_ID INTEGER,
	CONSTRAINT HPTL_DOCCLI_UK UNIQUE(DOCTOR_ID,CLINICA_ID),
	CONSTRAINT HPTL_DOR_PK_CLIDOC_FK FOREIGN KEY(DOCTOR_ID) REFERENCES HOSPITAL.HPTL_DOCTORES(ID),
	CONSTRAINT HTPL_CLI_PK_CLIDOC_FK FOREIGN KEY(CLINICA_ID) REFERENCES HOSPITAL.HPTL_CLINICAS(ID)
); 

CREATE TABLE HOSPITAL.HPTL_PERFILES(
	ID INTEGER NOT NULL,
	VERSION NUMERIC(5,0) NOT NULL,
	CODIGO VARCHAR2(20) NOT NULL,
	DESCRIPCION VARCHAR2(60),
	CONSTRAINT HPTL_PERFILES_PK PRIMARY KEY(ID)
);



CREATE TABLE HOSPITAL.HPTL_USUARIOS(
	ID INTEGER NOT NULL,
	VERSION NUMERIC(5,0) NOT NULL,
	USERNAME VARCHAR2(60) NOT NULL,
	PASSWORD VARCHAR2(512) NOT NULL,
	PERSONA_ID INTEGER NOT NULL,
	PERFIL_ID INTEGER,
	CONSTRAINT HPTL_USUARIOS_PK PRIMARY KEY(ID),
	CONSTRAINT HPTL_PERFILES_FK_USUARIOS FOREIGN KEY(PERFIL_ID) REFERENCES HOSPITAL.HPTL_PERFILES(ID),
	CONSTRAINT HPTL_PERSONAS_FK_USUARIOS FOREIGN KEY(PERSONA_ID) REFERENCES HOSPITAL.HPTL_PERSONAS(ID)	
);


CREATE TABLE HOSPITAL.HPTL_ROLES(
	ID INTEGER NOT NULL,
	VERSION NUMERIC(5,0) NOT NULL,
	CODIGO VARCHAR2(50) NOT NULL,
	DESCRIPCION VARCHAR2(60),
	CONSTRAINT HPTL_ROLES_PK PRIMARY KEY(ID)
);


CREATE TABLE HOSPITAL.HPTL_ROLES_PERFIL(
	ROL_ID INTEGER,
	PERFIL_ID INTEGER,
	CONSTRAINT HPTL_ROLUSU_UK UNIQUE(ROL_ID,PERFIL_ID),
	CONSTRAINT HPTL_ROL_PK_ROLPER_FK FOREIGN KEY(ROL_ID) REFERENCES HOSPITAL.HPTL_ROLES(ID),
	CONSTRAINT HTPL_PER_PK_ROLPER_FK FOREIGN KEY(PERFIL_ID) REFERENCES HOSPITAL.HPTL_PERFILES(ID)
); 

-- CONSULTA EXTERNA GRUPO #2

CREATE TABLE HOSPITAL.HPTL_CITAS (
		ID INTEGER NOT NULL,
		PACIENTES_ID INTEGER NOT NULL,
		CLINICAS_ID INTEGER NOT NULL,
		DOCTORES_ID INTEGER NOT NULL,
		ESPECIALIDAD_DOC_ID INTEGER,
		ESTATUS CHAR,
		OBSERVACIONES VARCHAR(60),
		FECHA_CITA_INICIO TIMESTAMP,
		FECHA_CITA_FIN TIMESTAMP,
		VERSION NUMERIC(5,0) NOT NULL,
		CONSTRAINT HPTL_CITAS_PK PRIMARY KEY (ID),
		CONSTRAINT HPTL_PAC_PK_HPTL_CIT_FK FOREIGN KEY (PACIENTES_ID) REFERENCES HOSPITAL.HPTL_PACIENTES(ID),
		CONSTRAINT HPTL_DOC_PK_HPTL_CIT_FK FOREIGN KEY (DOCTORES_ID) REFERENCES HOSPITAL.HPTL_DOCTORES(ID),
		CONSTRAINT HPTL_CLI_PK_HPTL_CIT_FK FOREIGN KEY (CLINICAS_ID) REFERENCES HOSPITAL.HPTL_CLINICAS(ID),
 		CONSTRAINT HPTL_ESP_PK_HPTL_CIT_FK FOREIGN KEY (ESPECIALIDAD_DOC_ID) REFERENCES HOSPITAL.HPTL_ESPECIALIDADES_DOC(ID)
);


CREATE TABLE HOSPITAL.HPTL_HIS_MEDICA_DETA (
		ID INTEGER NOT NULL,
		OBSERVACIONES VARCHAR(50),
		CITAS_ID INTEGER,
		VERSION NUMERIC(5,0) NOT NULL,
		CONSTRAINT HPTL_HIS_MEDICA_DETA_PK PRIMARY KEY (ID),
		CONSTRAINT HPTL_CIT_PK_HPTL_HIS_FK FOREIGN KEY (CITAS_ID) REFERENCES HOSPITAL.HPTL_CITAS(ID)
);

CREATE TABLE HOSPITAL.HPTL_RECETAS (
		ID INTEGER NOT NULL,
		HIS_DET_ID INTEGER,
		OBSERVACIONES VARCHAR(250),
		VERSION NUMERIC(5,0) NOT NULL,
		CONSTRAINT HPTL_RECETAS_PK PRIMARY KEY (ID),
		CONSTRAINT HPTL_HIS_PK_HPTL_REC_FK FOREIGN KEY (HIS_DET_ID) REFERENCES HOSPITAL.HPTL_HIS_MEDICA_DETA(ID)
);

CREATE TABLE HOSPITAL.HPTL_HIS_EXAMENES (
		EXAMENES_ID INTEGER NOT NULL,
		HIS_DET_ID INTEGER NOT NULL,
		CONSTRAINT HPTL_HIS_EXAMENES_UK UNIQUE (EXAMENES_ID,HIS_DET_ID),
		CONSTRAINT HPTL_EXA_PK_HPTL_HIS_EXA_FK FOREIGN KEY (EXAMENES_ID) REFERENCES HOSPITAL.HPTL_EXAMENES,
		CONSTRAINT HPTL_HIS_PK_HPTL_HIS_EXA_FK FOREIGN KEY (HIS_DET_ID) REFERENCES HOSPITAL.HPTL_HIS_MEDICA_DETA
);

CREATE TABLE HOSPITAL.HPTL_RECETA_MEDICAMENTO (
		ID INTEGER NOT NULL,
		RECETA_ID INTEGER NOT NULL,
		MEDICAMENTO_ID INTEGER NOT NULL,
		CANTIDAD INTEGER,
		VERSION NUMERIC(5,0)  NOT NULL,
		CONSTRAINT HPTL_RECMED_PK PRIMARY KEY (ID),
		CONSTRAINT HPTL_REC_PK_HPTL_REC_FK FOREIGN KEY (RECETA_ID) REFERENCES HOSPITAL.HPTL_RECETAS,
		CONSTRAINT HPTL_MED_PK_HPTL_MED_FK FOREIGN KEY (MEDICAMENTO_ID) REFERENCES HOSPITAL.HPTL_MEDICAMENTOS
);

CREATE TABLE HOSPITAL.HPTL_BITCNSEXT (
    ID_BITCNSEXT INTEGER NOT NULL,
    TABLA_BITCNSEXT VARCHAR2(30),
    IDTABLA_BITCNSEXT INTEGER,
    CAMPO_BITCNSEXT VARCHAR2(30),
    VANTERIOR_BITCNSEXT VARCHAR2(250),
    VNUEVO_BITCNSEXT VARCHAR2(250),
    FECHA_BITCNSEXT TIMESTAMP NOT NULL,
    USER_BITCNSEXT VARCHAR2 (30),
    CONSTRAINT PK_HPTL_BITCNSEXT PRIMARY KEY (ID_BITCNSEXT)
);

------------- TRIGER PARA HPTL_CITAS -------------
-- TRIGER UPDATE CITAS
CREATE TRIGGER HOSPITAL.HPTL_UCITAS
AFTER UPDATE ON HOSPITAL.HPTL_CITAS 
FOR EACH ROW
BEGIN
	-- CLINICAS
	IF :NEW.CLINICAS_ID != :OLD.CLINICAS_ID THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'CLINICAS',(SELECT DESCRIPCION FROM HOSPITAL.HPTL_CLINICAS WHERE ID = :OLD.CLINICAS_ID),(SELECT DESCRIPCION FROM HOSPITAL.HPTL_CLINICAS WHERE ID = :NEW.CLINICAS_ID),SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
	-- ESTATUS
	IF :NEW.ESTATUS != :OLD.ESTATUS THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'ESTATUS',:OLD.ESTATUS,:NEW.ESTATUS,SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
	-- OBSERVACIONES
	IF :NEW.OBSERVACIONES != :OLD.OBSERVACIONES THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'OBSERVACIONES',:OLD.OBSERVACIONES,:NEW.OBSERVACIONES,SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
	-- DOCTORES
	IF :NEW.DOCTORES_ID != :OLD.DOCTORES_ID THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'DOCTORES',
		(SELECT PRIMER_NOMBRE FROM HOSPITAL.HPTL_PERSONAS INNER JOIN HPTL_EMPLEADOS ON HPTL_PERSONAS.ID = HPTL_EMPLEADOS.PERSONAS_ID INNER JOIN HPTL_DOCTORES ON HPTL_EMPLEADOS.ID = HPTL_DOCTORES.EMPLEADOS_ID WHERE HPTL_DOCTORES.ID = :OLD.DOCTORES_ID) || ' ' ||
		(SELECT PRIMER_APELLIDO FROM HOSPITAL.HPTL_PERSONAS INNER JOIN HPTL_EMPLEADOS ON HPTL_PERSONAS.ID = HPTL_EMPLEADOS.PERSONAS_ID INNER JOIN HPTL_DOCTORES ON HPTL_EMPLEADOS.ID = HPTL_DOCTORES.EMPLEADOS_ID WHERE HPTL_DOCTORES.ID = :OLD.DOCTORES_ID),
		(SELECT PRIMER_NOMBRE FROM HOSPITAL.HPTL_PERSONAS INNER JOIN HPTL_EMPLEADOS ON HPTL_PERSONAS.ID = HPTL_EMPLEADOS.PERSONAS_ID INNER JOIN HPTL_DOCTORES ON HPTL_EMPLEADOS.ID = HPTL_DOCTORES.EMPLEADOS_ID WHERE HPTL_DOCTORES.ID = :NEW.DOCTORES_ID)  || ' ' ||
		(SELECT PRIMER_APELLIDO FROM HOSPITAL.HPTL_PERSONAS INNER JOIN HPTL_EMPLEADOS ON HPTL_PERSONAS.ID = HPTL_EMPLEADOS.PERSONAS_ID INNER JOIN HPTL_DOCTORES ON HPTL_EMPLEADOS.ID = HPTL_DOCTORES.EMPLEADOS_ID WHERE HPTL_DOCTORES.ID = :NEW.DOCTORES_ID),
		SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
	-- FECHA_INICIO_CITA
	/*IF :NEW.FECHA_INICIO_CITA != :OLD.FECHA_INICIO_CITA THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'FECHA_INICIO_CITA',TO_CHAR(:OLD.FECHA_INICIO_CITA),TO_CHAR(:NEW.FECHA_INICIO_CITA),
		SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
	-- FECHA_INICIO_CITA
	IF :NEW.FECHA_FIN_CITA != :OLD.FECHA_FIN_CITA THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'FECHA_INICIO_CITA',TO_CHAR(:OLD.FECHA_FIN_CITA),TO_CHAR(:NEW.FECHA_FIN_CITA),
		SYSDATE,USERENV('CLIENT_INFO'));
	END IF;*/
END;

-- TRIGER INSERT CITAS
CREATE TRIGGER HOSPITAL.HPTL_ICITAS
AFTER INSERT ON HOSPITAL.HPTL_CITAS 
FOR EACH ROW
BEGIN
	-- CLINICAS
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:NEW.ID,'CLINICAS',(SELECT DESCRIPCION FROM HOSPITAL.HPTL_CLINICAS WHERE ID = :NEW.CLINICAS_ID),SYSDATE,USERENV('CLIENT_INFO'));
	-- ESTATUS
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:NEW.ID,'ESTATUS',:NEW.ESTATUS,SYSDATE,USERENV('CLIENT_INFO'));
	-- OBSERVACIONES
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:NEW.ID,'OBSERVACIONES',:NEW.OBSERVACIONES,SYSDATE,USERENV('CLIENT_INFO'));
	-- DOCTORES
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:NEW.ID,'DOCTORES',
	(SELECT PRIMER_NOMBRE FROM HOSPITAL.HPTL_PERSONAS INNER JOIN HPTL_EMPLEADOS ON HPTL_PERSONAS.ID = HPTL_EMPLEADOS.PERSONAS_ID INNER JOIN HPTL_DOCTORES ON HPTL_EMPLEADOS.ID = HPTL_DOCTORES.EMPLEADOS_ID WHERE HPTL_DOCTORES.ID = :NEW.DOCTORES_ID)  || ' ' ||
	(SELECT PRIMER_APELLIDO FROM HOSPITAL.HPTL_PERSONAS INNER JOIN HPTL_EMPLEADOS ON HPTL_PERSONAS.ID = HPTL_EMPLEADOS.PERSONAS_ID INNER JOIN HPTL_DOCTORES ON HPTL_EMPLEADOS.ID = HPTL_DOCTORES.EMPLEADOS_ID WHERE HPTL_DOCTORES.ID = :NEW.DOCTORES_ID),
	SYSDATE,USERENV('CLIENT_INFO'));
END;


-- TRIGGER DELETE CITAS;
CREATE TRIGGER HOSPITAL.HPTL_DCITAS
BEFORE DELETE ON HOSPITAL.HPTL_CITAS 
FOR EACH ROW
BEGIN
	-- CLINICAS
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'CLINICAS',(SELECT DESCRIPCION FROM HOSPITAL.HPTL_CLINICAS WHERE ID = :OLD.CLINICAS_ID),SYSDATE,USERENV('CLIENT_INFO'));
	-- ESTATUS
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'ESTATUS',:OLD.ESTATUS,SYSDATE,USERENV('CLIENT_INFO'));
	-- OBSERVACIONES
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'OBSERVACIONES',:OLD.OBSERVACIONES,SYSDATE,USERENV('CLIENT_INFO'));
	-- DOCTORES
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_CITAS',:OLD.ID,'DOCTORES',
	(SELECT PRIMER_NOMBRE FROM HOSPITAL.HPTL_PERSONAS INNER JOIN HPTL_EMPLEADOS ON HPTL_PERSONAS.ID = HPTL_EMPLEADOS.PERSONAS_ID INNER JOIN HPTL_DOCTORES ON HPTL_EMPLEADOS.ID = HPTL_DOCTORES.EMPLEADOS_ID WHERE HPTL_DOCTORES.ID = :OLD.DOCTORES_ID)  || ' ' ||
	(SELECT PRIMER_APELLIDO FROM HOSPITAL.HPTL_PERSONAS INNER JOIN HPTL_EMPLEADOS ON HPTL_PERSONAS.ID = HPTL_EMPLEADOS.PERSONAS_ID INNER JOIN HPTL_DOCTORES ON HPTL_EMPLEADOS.ID = HPTL_DOCTORES.EMPLEADOS_ID WHERE HPTL_DOCTORES.ID = :OLD.DOCTORES_ID),
	SYSDATE,USERENV('CLIENT_INFO'));
END;


------------- TRIGER PARA HPTL_UHIS_MEDICA_DETA -------------
CREATE TRIGGER HOSPITAL.HPTL_UHIS_MEDICA_DETA
AFTER UPDATE ON HOSPITAL.HPTL_HIS_MEDICA_DETA 
FOR EACH ROW
BEGIN
	-- OBSERVACIONES
	IF :NEW.OBSERVACIONES != :OLD.OBSERVACIONES THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_HIS_MEDICA_DETA',:OLD.ID,'OBSERVACIONES', :OLD.OBSERVACIONES,:NEW.OBSERVACIONES,SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
	-- CITAS_ID
	IF :NEW.CITAS_ID != :OLD.CITAS_ID THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_HIS_MEDICA_DETA',:OLD.ID,'CITAS_ID',:OLD.CITAS_ID,:NEW.CITAS_ID,SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
END;

-- TRIGGER INSERT HIS_MEDICA_DETA
CREATE TRIGGER HOSPITAL.HPTL_IHIS_MEDICA_DETA
AFTER INSERT ON HOSPITAL.HPTL_HIS_MEDICA_DETA 
FOR EACH ROW
BEGIN
	-- OBSERVACIONES
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_HIS_MEDICA_DETA',:NEW.ID,'OBSERVACIONES', :NEW.OBSERVACIONES,SYSDATE,USERENV('CLIENT_INFO'));
	-- CITAS_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_HIS_MEDICA_DETA',:NEW.ID,'CITAS_ID',:NEW.CITAS_ID,SYSDATE,USERENV('CLIENT_INFO'));
END;

-- TRIGGER DELETE HIS_MEDICA_DETA
CREATE TRIGGER HOSPITAL.HPTL_DHIS_MEDICA_DETA
BEFORE DELETE ON HOSPITAL.HPTL_HIS_MEDICA_DETA 
FOR EACH ROW
BEGIN
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_HIS_MEDICA_DETA',:OLD.ID,'OBSERVACIONES', :OLD.OBSERVACIONES,SYSDATE,USERENV('CLIENT_INFO'));
	-- CITAS_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_HIS_MEDICA_DETA',:OLD.ID,'CITAS_ID',:OLD.CITAS_ID,SYSDATE,USERENV('CLIENT_INFO'));
END;

------------- TRIGER PARA HPTL_RECETAS -------------
-- TRIGER UPDATE HPTL_RECETAS
CREATE TRIGGER HOSPITAL.HPTL_URECETAS
AFTER UPDATE ON HOSPITAL.HPTL_RECETAS 
FOR EACH ROW
BEGIN
	-- OBSERVACIONES
	IF :NEW.OBSERVACIONES != :OLD.OBSERVACIONES THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETAS',:OLD.ID,'OBSERVACIONES', :OLD.OBSERVACIONES,:NEW.OBSERVACIONES,SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
	-- HIS_DET_ID
	IF :NEW.HIS_DET_ID != :OLD.HIS_DET_ID THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETAS',:OLD.ID,'HIS_DET_ID',:OLD.HIS_DET_ID,:NEW.HIS_DET_ID,SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
END;

-- TRIGGER INSERT HPTL_RECETAS
CREATE TRIGGER HOSPITAL.HPTL_IRECETAS
AFTER INSERT ON HOSPITAL.HPTL_RECETAS 
FOR EACH ROW
BEGIN
	-- OBSERVACIONES
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETAS',:NEW.ID,'OBSERVACIONES', :NEW.OBSERVACIONES,SYSDATE,USERENV('CLIENT_INFO'));
	-- HIS_DET_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_HIS_MEDICA_DETA',:NEW.ID,'HIS_DET_ID',:NEW.HIS_DET_ID,SYSDATE,USERENV('CLIENT_INFO'));
END;


-- TRIGGER DELETE HPTL_RECETAS
CREATE TRIGGER HOSPITAL.HPTL_DRECETAS
BEFORE DELETE ON HOSPITAL.HPTL_RECETAS 
FOR EACH ROW
BEGIN
	-- OBSERVACIONES
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETAS',:OLD.ID,'OBSERVACIONES', :OLD.OBSERVACIONES,SYSDATE,USERENV('CLIENT_INFO'));
	-- HIS_DET_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETAS',:OLD.ID,'HIS_DET_ID',:OLD.HIS_DET_ID,SYSDATE,USERENV('CLIENT_INFO'));
END;


------------- TRIGER PARA HPTL_HIS_EXAMENES -------------
CREATE TRIGGER HOSPITAL.HPTL_IHIS_EXAMENES
AFTER INSERT ON HOSPITAL.HPTL_HIS_EXAMENES 
FOR EACH ROW
BEGIN
	-- EXAMENES_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_HIS_EXAMENES',:NEW.HIS_DET_ID,'EXAMENES_ID',
	(SELECT DESCRIPCION FROM HOSPITAL.HPTL_EXAMENES INNER JOIN HOSPITAL.HPTL_HIS_EXAMENES ON 
	HOSPITAL.HPTL_EXAMENES.ID = HOSPITAL.HPTL_HIS_EXAMENES.EXAMENES_ID WHERE HOSPITAL.HPTL_HIS_EXAMENES.EXAMENES_ID = :NEW.EXAMENES_ID),
	SYSDATE,USERENV('CLIENT_INFO'));
END;

CREATE TRIGGER HOSPITAL.HPTL_DHIS_EXAMENES
BEFORE DELETE ON HOSPITAL.HPTL_HIS_EXAMENES 
FOR EACH ROW
BEGIN
	-- EXAMENES_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_HIS_EXAMENES',:OLD.HIS_DET_ID,'EXAMENES_ID',
	(SELECT DESCRIPCION FROM HOSPITAL.HPTL_EXAMENES INNER JOIN HOSPITAL.HPTL_HIS_EXAMENES ON 
	HOSPITAL.HPTL_EXAMENES.ID = HOSPITAL.HPTL_HIS_EXAMENES.EXAMENES_ID WHERE HOSPITAL.HPTL_HIS_EXAMENES.EXAMENES_ID = :OLD.EXAMENES_ID),
	SYSDATE,USERENV('CLIENT_INFO'));
END;


------------- TRIGER PARA HPTL_RECETA_MEDICAMENTO -------------
CREATE TRIGGER HOSPITAL.HPTL_URECETA_MEDICAMENTO
AFTER UPDATE ON HOSPITAL.HPTL_RECETA_MEDICAMENTO 
FOR EACH ROW
BEGIN
	-- RECETA_ID
	IF :NEW.RECETA_ID != :OLD.RECETA_ID THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETA_MEDICAMENTO',:OLD.ID,'RECETA_ID', :OLD.RECETA_ID,:NEW.RECETA_ID,SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
	-- MEDICAMENTO_ID
	IF :NEW.MEDICAMENTO_ID != :OLD.MEDICAMENTO_ID THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETA_MEDICAMENTO',:OLD.ID,'MEDICAMENTO_ID',:OLD.MEDICAMENTO_ID,:NEW.MEDICAMENTO_ID,SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
	-- CANTIDAD
	IF :NEW.CANTIDAD != :OLD.CANTIDAD THEN
		INSERT INTO
		HOSPITAL.HPTL_BITCNSEXT
		(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
		VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETA_MEDICAMENTO',:OLD.ID,'CANTIDAD',:OLD.CANTIDAD,:NEW.CANTIDAD,SYSDATE,USERENV('CLIENT_INFO'));
	END IF;
END;

CREATE TRIGGER HOSPITAL.HPTL_IRECETA_MEDICAMENTO
AFTER INSERT ON HOSPITAL.HPTL_RECETA_MEDICAMENTO
FOR EACH ROW
BEGIN
	-- RECETA_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETA_MEDICAMENTO',:OLD.ID,'RECETA_ID',:NEW.RECETA_ID,SYSDATE,USERENV('CLIENT_INFO'));
	-- MEDICAMENTO_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETA_MEDICAMENTO',:OLD.ID,'MEDICAMENTO_ID',:NEW.MEDICAMENTO_ID,SYSDATE,USERENV('CLIENT_INFO'));
	-- CANTIDAD
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VNUEVO_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETA_MEDICAMENTO',:OLD.ID,'CANTIDAD',:NEW.CANTIDAD,SYSDATE,USERENV('CLIENT_INFO'));
END;

CREATE TRIGGER HOSPITAL.HPTL_DRECETA_MEDICAMENTO
BEFORE DELETE ON HOSPITAL.HPTL_RECETA_MEDICAMENTO
FOR EACH ROW
BEGIN
	-- RECETA_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETA_MEDICAMENTO',:OLD.ID,'RECETA_ID', :OLD.RECETA_ID,SYSDATE,USERENV('CLIENT_INFO'));
	-- MEDICAMENTO_ID
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETA_MEDICAMENTO',:OLD.ID,'MEDICAMENTO_ID',:OLD.MEDICAMENTO_ID,SYSDATE,USERENV('CLIENT_INFO'));
	-- CANTIDAD
	INSERT INTO
	HOSPITAL.HPTL_BITCNSEXT
	(ID_BITCNSEXT, TABLA_BITCNSEXT, IDTABLA_BITCNSEXT, CAMPO_BITCNSEXT, VANTERIOR_BITCNSEXT, FECHA_BITCNSEXT, USER_BITCNSEXT)
	VALUES (HOSPITAL.HPTL_BITCNSEXT_SEQ.NEXTVAL,'HPTL_RECETA_MEDICAMENTO',:OLD.ID,'CANTIDAD',:OLD.CANTIDAD,SYSDATE,USERENV('CLIENT_INFO'));
END;






-- SCRIPT GRUPO #9

CREATE TABLE HPTL_ALMACENAMIENTO (
		IDALMACENAMIENTO INT NOT NULL,
		IDTIPOALMACENAMIENTO INT NULL,
		CONSTRAINT PK_HPTL_ALMACENAMIENTO PRIMARY KEY (IDALMACENAMIENTO)
);

CREATE TABLE HPTL_CONTROLES (
		IDCONTROL INT NOT NULL,
		TIPOCONTROL VARCHAR2(50) NULL,
		CONSTRAINT PK_HPTL_CONTROLES PRIMARY KEY (IDCONTROL)
);

CREATE TABLE HPTL_CONTROLESPORRECURSOS (
		IDCONTROLXRECURSO INT NOT NULL,
		IDCONTROL INT NULL,
		IDRECURSO INT NULL,
		IDENTREGA INT NULL,
		CONSTRAINT PK_HPTL_CONTROLESPORRECURSOS PRIMARY KEY (IDCONTROLXRECURSO)
);


CREATE TABLE HPTL_ENTREGA (
		IDENTREGA INT NOT NULL,
		IDPAQUETE INT NULL,
		FECHADEESTERILAZION DATE NULL,
		FECHADECADUCIDAD DATE NULL,
		HORADENTREGA DATE NULL,
		CONSTRAINT PK_HPTL_ENTREGA PRIMARY KEY (IDENTREGA)
);

CREATE TABLE HPTL_ENVASES (
		IDENVASE INT NOT NULL,
		TIPOEVASE VARCHAR2(50) NULL,
		CONSTRAINT PK_HPTL_ENVASES PRIMARY KEY (IDENVASE)
);

CREATE TABLE HPTL_ENVASEXPAQUETE (
		ENVASEXPAQUETE INT NOT NULL,
		IDPAQUETE INT NULL,
		IDENVASE INT NULL,
		CONSTRAINT PK_HPTL_ENVASEXPAQUETE PRIMARY KEY (ENVASEXPAQUETE)
);


CREATE TABLE HPTL_LIMPIEZA (
		IDLIMPIEZA INT NOT NULL,
		IDAREA INT NULL,
		IDTIPOLIMPIEZA INT NULL,
		ID INTEGER NULL,
		HPT_ID INTEGER NULL,
		IDEMPLEADO INT NULL,
		CONSTRAINT PK_HPTL_LIMPIEZA PRIMARY KEY (IDLIMPIEZA)
);

CREATE TABLE HPTL_MATENIMIENTO (
		IDMANTENIMIENTO INT NOT NULL,
		ID INTEGER NULL,
		IDRECURSO INT NULL,
		IDEMPLEADO INT NULL,
		COMTROLBIOLOGICO VARCHAR2(50) NULL,
		CONTROLQUIMICO VARCHAR2(50) NULL,
		CONSTRAINT PK_HPTL_MATENIMIENTO PRIMARY KEY (IDMANTENIMIENTO)
);

CREATE TABLE HPTL_PAQUETES 
(
   IDPAQUETE            INT                            not null,
   IDCONSERVACION       INT                            null,
   IDALMACENAMIENTO     INT                            null,
   IDTRANSPORTE         INT                            null,
   CONSTRAINT PK_HPTL_PAQUETES primary key (IDPAQUETE)
);

CREATE TABLE HPTL_RECURSOXAREA 
(
   IDRECURSO            INT                            null,
   ID                   INTEGER                        null,
   IDAREA               INT                            null
);

CREATE TABLE HPTL_RIESGOS 
(
   IDRIESGOS            INT                            not null,
   IDTIPORIESGOS        INT                            null,
   CONSTRAINT PK_HPTL_RIESGOS PRIMARY KEY (IDRIESGOS)
);

CREATE TABLE HPTL_TIPOALMACENAMIENTO 
(
   IDTIPOALMACENAMIENTO INT                            not null,
   DESCRIPCION          VARCHAR2(50)                   null,
   CONSTRAINT PK_HPTL_TIPOALMACENAMIENTO PRIMARY KEY (IDTIPOALMACENAMIENTO)
);

CREATE TABLE HPTL_TIPOLIMPIEZA 
(
   IDTIPOLIMPIEZA       INT                            not null,
   DESCRIPCION          VARCHAR2(50)                   null,
   CONSTRAINT PK_HPTL_TIPOLIMPIEZA PRIMARY KEY (IDTIPOLIMPIEZA)
);

CREATE TABLE HPTL_TIPORIESGOS 
(
   IDTIPORIESGOS        INT                            not null,
   DESCRIPCION          VARCHAR2(50)                   null,
   CONSTRAINT PK_HPTL_TIPORIESGOS PRIMARY KEY (IDTIPORIESGOS)
);

create table HPTL_TIPOTRANSPORTE 
(
   IDTIPOTRANSPORTE     INT                            not null,
   DESCRIPCION          VARCHAR2(50)                   null,
   constraint PK_HPTL_TIPOTRANSPORTE primary key (IDTIPOTRANSPORTE)
);

create table HPTL_TRANSPORTE 
(
   IDTRANSPORTE         INT                            not null,
   IDTIPOTRANSPORTE     INT                            null,
   constraint PK_HPTL_TRANSPORTE primary key (IDTRANSPORTE)
);

create table HPTL_UTENCILIOS 
(
   IDRECURSO            INT                            not null,
   TIPOMATERIAL         VARCHAR2(50)                   null,
   constraint PK_HPTL_UTENCILIOS primary key (IDRECURSO)
);

create table HPTL_UTENCILIOSXPAQUETE 
(
   IDUTENCILIOSXPAQUETE INT                            not null,
   IDPAQUETE            INT                            null,
   IDRECURSO            INT                            null,
   constraint PK_HPTL_UTENCILIOSXPAQUETE primary key (IDUTENCILIOSXPAQUETE)
);


alter table HPTL_ALMACENAMIENTO
   add constraint FK_HPTL_ALM_REFERENCE_HPTL_TIP foreign key (IDTIPOALMACENAMIENTO)
      references HPTL_TIPOALMACENAMIENTO (IDTIPOALMACENAMIENTO)
      on update restrict
      on delete restrict;

alter table HPTL_CONTROLESPORRECURSOS
   add constraint FK_HPTL_CON_REFERENCE_HPTL_CON foreign key (IDCONTROL)
      references HPTL_CONTROLES (IDCONTROL)
      on update restrict
      on delete restrict;

alter table HPTL_CONTROLESPORRECURSOS
   add constraint FK_HPTL_CON_REFERENCE_HPTL_UTE foreign key (IDRECURSO)
      references HPTL_UTENCILIOS (IDRECURSO)
      on update restrict
      on delete restrict;

alter table HPTL_CONTROLESPORRECURSOS
   add constraint FK_HPTL_CON_REFERENCE_HPTL_ENT foreign key (IDENTREGA)
      references HPTL_ENTREGA (IDENTREGA)
      on update restrict
      on delete restrict;	  
	  
alter table HPTL_ENTREGA
   add constraint FK_HPTL_ENT_REFERENCE_HPTL_PAQ foreign key (IDPAQUETE)
      references HPTL_PAQUETES (IDPAQUETE)
      on update restrict
      on delete restrict;

alter table HPTL_ENVASEXPAQUETE
   add constraint FK_HPTL_ENV_REFERENCE_HPTL_ENV foreign key (IDENVASE)
      references HPTL_ENVASES (IDENVASE)
      on update restrict
      on delete restrict;

alter table HPTL_ENVASEXPAQUETE
   add constraint FK_HPTL_ENV_REFERENCE_HPTL_PAQ foreign key (IDPAQUETE)
      references HPTL_PAQUETES (IDPAQUETE)
      on update restrict
      on delete restrict;
	  
alter table HPTL_LIMPIEZA
   add constraint FK_HPTL_LIM_REFERENCE_HPTL_ARE foreign key (ID)
      references HPTL.HPTL_AREAS (ID)
      on update restrict
      on delete restrict;

alter table HPTL_LIMPIEZA
   add constraint FK_HPTL_LIM_REFERENCE_HPTL_TIP foreign key (IDTIPOLIMPIEZA)
      references HPTL_TIPOLIMPIEZA (IDTIPOLIMPIEZA)
      on update restrict
      on delete restrict;

alter table HPTL_LIMPIEZA
   add constraint FK_HPTL_LIM_REFERENCE_HPTL_PUE foreign key (HPT_ID)
      references HPTL.HPTL_PUESTOS_AREAS (ID)
      on update restrict
      on delete restrict;

alter table HPTL_MATENIMIENTO
   add constraint FK_HPTL_MAT_REFERENCE_HPTL_UTE foreign key (IDRECURSO)
      references HPTL_UTENCILIOS (IDRECURSO)
      on update restrict
      on delete restrict;

alter table HPTL_MATENIMIENTO
   add constraint FK_HPTL_MAT_REFERENCE_HPTL_PUE foreign key (ID)
      references HPTL.HPTL_PUESTOS_AREAS (ID)
      on update restrict
      on delete restrict;

alter table HPTL_PAQUETES
   add constraint FK_HPTL_PAQ_REFERENCE_HPTL_RIE foreign key (IDCONSERVACION)
      references HPTL_RIESGOS (IDRIESGOS)
      on update restrict
      on delete restrict;

alter table HPTL_PAQUETES
   add constraint FK_HPTL_PAQ_REFERENCE_HPTL_ALM foreign key (IDALMACENAMIENTO)
      references HPTL_ALMACENAMIENTO (IDALMACENAMIENTO)
      on update restrict
      on delete restrict;

alter table HPTL_PAQUETES
   add constraint FK_HPTL_PAQ_REFERENCE_HPTL_TRA foreign key (IDTRANSPORTE)
      references HPTL_TRANSPORTE (IDTRANSPORTE)
      on update restrict
      on delete restrict;
	  
alter table HPTL_RECURSOXAREA
   add constraint FK_HPTL_REC_REFERENCE_HPTL_UTE foreign key (IDRECURSO)
      references HPTL_UTENCILIOS (IDRECURSO)
      on update restrict
      on delete restrict;

alter table HPTL_RECURSOXAREA
   add constraint FK_HPTL_REC_REFERENCE_HPTL_ARE foreign key (ID)
      references HPTL.HPTL_AREAS (ID)
      on update restrict
      on delete restrict;

alter table HPTL_RIESGOS
   add constraint FK_HPTL_RIE_REFERENCE_HPTL_TIP foreign key (IDTIPORIESGOS)
      references HPTL_TIPORIESGOS (IDTIPORIESGOS)
      on update restrict
      on delete restrict;

alter table HPTL_TRANSPORTE
   add constraint FK_HPTL_TRA_REFERENCE_HPTL_TIP foreign key (IDTIPOTRANSPORTE)
      references HPTL_TIPOTRANSPORTE (IDTIPOTRANSPORTE)
      on update restrict
      on delete restrict;

alter table HPTL_UTENCILIOSXPAQUETE
   add constraint FK_HPTL_UTE_REFERENCE_HPTL_PAQ foreign key (IDPAQUETE)
      references HPTL_PAQUETES (IDPAQUETE)
      on update restrict
      on delete restrict;

alter table HPTL_UTENCILIOSXPAQUETE
   add constraint FK_HPTL_UTE_REFERENCE_HPTL_UTE foreign key (IDRECURSO)
      references HPTL_UTENCILIOS (IDRECURSO)
      on update restrict
      on delete restrict;

-- BASE DE DATOS GRUPO 10 (CONTROL DE EMPLEADOS)

CREATE TABLE HPTL_EMPRESA (
ID_EMPRESA NUMBER(5) NOT NULL,
NOMBRE_EMPRESA VARCHAR2(40) NOT NULL,
DIRECCIONES_ID NUMBER(9) NOT NULL,
CONSTRAINT PK_HPTL_EMPRESA PRIMARY KEY (ID_EMPRESA),
CONSTRAINT PK_HPTL_DIR_HPTL_EMP_FK FOREIGN KEY(DIRECCIONES_ID) REFERENCES HPTL_DIRECCIONES(ID)
);

CREATE TABLE HPTL_EMPRESA_CLINICA (
ID_EMPRESA_CLINICA NUMBER(5) NOT NULL, 
CLINICA_ID NUMBER(9) NOT NULL,
ID_EMPRESA NUMBER(5) NOT NULL, 
CONSTRAINT PK_HPTL_EMP_CLI PRIMARY KEY (ID_EMPRESA_CLINICA),
CONSTRAINT PK_HPTL_CLI_HPTL_EMP_CLI_FK FOREIGN KEY(CLINICA_ID) REFERENCES HPTL_CLINICAS(ID),
CONSTRAINT PK_HPTL_EMP_HPTL_EMP_CLI_FK FOREIGN KEY(ID_EMPRESA) REFERENCES HPTL_EMPRESA(ID_EMPRESA)
);

CREATE TABLE HPTL_EMPO_EMP_CLI (
ID_EMPO_EMP_CLI NUMBER(5) NOT NULL, 
ID_EMPRESA_CLINICA NUMBER(5) NOT NULL, 
EMPLEADOS_PUESTOS_ID NUMBER(9) NOT NULL,
CONSTRAINT PK_HPTL_EMPO_EMP_CLI PRIMARY KEY (ID_EMPO_EMP_CLI),
CONSTRAINT PK_HPTL_EMP_CLI_HPTL_E_E_C_FK FOREIGN KEY(ID_EMPRESA_CLINICA) REFERENCES HPTL_EMPRESA_CLINICA(ID_EMPRESA_CLINICA),
CONSTRAINT PK_HPTL_EMPO_PUE_HPTL_E_E_C_FK FOREIGN KEY(EMPLEADOS_PUESTOS_ID) REFERENCES HPTL_EMPLEADOS_PUESTOS(ID)
);

CREATE TABLE HPTL_TURNO (
ID_TURNO NUMBER(5) NOT NULL, 
DESCRIPCION_TURNO VARCHAR2(30) NOT NULL, 
CONSTRAINT PK_HPTL_TURNO PRIMARY KEY (ID_TURNO)
);

CREATE TABLE HPTL_TURNO_EMPLEADO (
ID_TURNO_EMPLEADO NUMBER(5) NOT NULL, 
EMPLEADOS_PUESTOS_ID NUMBER(9) NOT NULL, 
ID_TURNO NUMBER(5) NOT NULL, 
HORARIOS_ID NUMBER(9) NOT NULL, 
FECHA_INICIO_TURNO DATE NOT NULL, 
FECHA_FIN_TURNO DATE NOT NULL,
CREADOPOR VARCHAR2(30) NOT NULL,
FECHACREACION DATE NOT NULL, 
CONSTRAINT PK_HPTL_TURNO_EMPLEADO PRIMARY KEY (ID_TURNO_EMPLEADO),
CONSTRAINT PK_HPTL_EMPO_PUE_HPTL_T_E_FK FOREIGN KEY(EMPLEADOS_PUESTOS_ID) REFERENCES HPTL_EMPLEADOS_PUESTOS(ID),
CONSTRAINT PK_HPTL_TURNO_HPTL_T_E_FK FOREIGN KEY(ID_TURNO) REFERENCES HPTL_TURNO(ID_TURNO),
CONSTRAINT PK_HPTL_HORARI_HPTL_T_E_FK FOREIGN KEY(HORARIOS_ID) REFERENCES HPTL_HORARIOS(ID)
);

CREATE TABLE HPTL_DIRECCION_EMPLEADO (
ID_DIRECCION_EMPLEADO NUMBER(5) NOT NULL, 
EMPLEADOS_ID NUMBER(9) NOT NULL,
DIRECCIONES_ID NUMBER(9) NOT NULL,
CONSTRAINT PK_HPTL_DIR_EMP PRIMARY KEY (ID_DIRECCION_EMPLEADO),
CONSTRAINT PK_HPTL_EMPO_HPTL_DIR_EMPO_FK FOREIGN KEY(EMPLEADOS_ID) REFERENCES HPTL_EMPLEADOS(ID),
CONSTRAINT PK_HPTL_DIR_HPTL_DIR_EMPO_FK FOREIGN KEY(DIRECCIONES_ID) REFERENCES HPTL_DIRECCIONES(ID)
);

CREATE TABLE HPTL_MOV_ADMIN (
ID_MOV_ADMIN NUMBER(5) NOT NULL,
DESCRIPCION_MOV VARCHAR2(30) NOT NULL, 
CONSTRAINT PK_HPTL_MOV_ADMIN PRIMARY KEY (ID_MOV_ADMIN)
);

CREATE TABLE HPTL_DET_MOV_ADMIN (
ID_DET_MOV_ADMIN NUMBER(5) NOT NULL, 
ID_MOV_ADMIN NUMBER(5) NOT NULL, 
FECHA_INICIO_MOV DATE NOT NULL, 
FECHA_FIN_MOV DATE NOT NULL, 
PUESTO_ANTERIOR NUMBER(9),
PUESTO_NUEVO NUMBER(9),
EMPLEADOS_ID NUMBER(9) NOT NULL, 
SUELDO_BASE NUMBER(9),
SUELDO_BONIFICACION NUMBER(9),
SUELDO_COMISION NUMBER(9),
CREADOPOR VARCHAR2(30) NOT NULL, 
FECHACREACION DATE NOT NULL,
CONSTRAINT PK_HPTL_DET_MOV_ADMIN PRIMARY KEY (ID_DET_MOV_ADMIN),
CONSTRAINT PK_HPTL_MO_AD_HPTL_D_M_A_FK FOREIGN KEY(ID_MOV_ADMIN) REFERENCES HPTL_MOV_ADMIN(ID_MOV_ADMIN),
CONSTRAINT PK_HPTL_EMPO_HPTL_D_M_A_FK FOREIGN KEY(EMPLEADOS_ID) REFERENCES HPTL_EMPLEADOS(ID)
);

CREATE TABLE HPTL_BITACORA (
ID_BITACORA NUMBER (50) NOT NULL,
TABLA_AFECTADA VARCHAR2(50) NOT NULL,
CAMPO_AFECTADO VARCHAR2(35),
VALOR_ANTERIOR VARCHAR2(35),
VALOR_NUEVO VARCHAR2(35),
FECHA_BITACORA DATE NOT NULL,
USER_BITACORA VARHCAR2(30),
CONSTRAINT PK_HPTL_BITACORA PRIMARY KEY (ID_BITACORA)
);

-- TABLAS GRUPO 8 (TRATAMIENTOS)
CREATE TABLE HPTL_TIPO_TRATAMIENTO(
    ID          NUMBER NOT NULL ,
    DESCRIPCION VARCHAR2 (50)
  )
  LOGGING ;
ALTER TABLE HPTL_TIPO_TRATAMIENTO ADD CONSTRAINT HPTL_TIPO_TRATAMIENTO_PK PRIMARY KEY ( ID ) ;


CREATE TABLE HPTL_ETAPA_TRATAMIENTOS (
    ID                   NUMBER NOT NULL ,
    NOETAPA           NUMBER ,
    ETAPA                VARCHAR2 (50) ,
    TRATAMIENTOS_ID NUMBER NOT NULL
  )
  LOGGING ;
ALTER TABLE HPTL_ETAPA_TRATAMIENTOS ADD CONSTRAINT HPTL_ETAPA_TRATAMIENTOS_PK PRIMARY KEY ( ID ) ;

CREATE TABLE HPTL_TRATAMIENTOS(
    ID          NUMBER NOT NULL ,
    DESCRIPCION VARCHAR2 (50),
    TIPO_TRATAMIENTO_ID NUMBER NOT NULL
  )
  LOGGING ;
ALTER TABLE HPTL_TRATAMIENTOS ADD CONSTRAINT HPTL_TRATAMIENTOS_PK PRIMARY KEY ( ID ) ;


ALTER TABLE HPTL_ETAPA_TRATAMIENTOS ADD CONSTRAINT HPTL_ETAPA_TRA_HPTL_TRA_FK FOREIGN KEY ( HPTL_TRATAMIENTOS_ID ) REFERENCES HPTL_TRATAMIENTOS ( ID ) NOT DEFERRABLE ;

ALTER TABLE HPTL_TRATAMIENTOS ADD CONSTRAINT HPTL_TRA_PK_HPTL_TIPO_TRA_FK FOREIGN KEY ( TIPO_TRATAMIENTO_ID ) REFERENCES HPTL_TIPO_TRATAMIENTO ( ID ) NOT DEFERRABLE ;

-- TABLAS GRUPO 6 (LABORATORIOS)
/*==============================================================*/
/* DBMS name:      ORACLE Version 11g                           */
/* Created on:     9/04/2016 12:57:54 a. m.                     */
/*==============================================================*/

/*==============================================================*/
/* TABLE: LABORATORIOS_TIPO                                     */
/*==============================================================*/

CREATE TABLE HOSPITAL.LABORATORIOS_TIPO 
(
   IDLABOTIPO INT PRIMARY KEY,
   DSLABOTIPO VARCHAR2(100) NOT NULL   
);
/*Valor Unico en descripcion*/
ALTER TABLE HOSPITAL.LABORATORIOS_TIPO 
ADD CONSTRAINT UQ_LAB_TIP_DSLABOTIPO
UNIQUE (DSLABOTIPO);

/*==============================================================*/
/* SECUENCIA: LABORATORIOS_TIPO                                 */
/*==============================================================*/
CREATE SEQUENCE HOSPITAL.LABOTIPO
START WITH 1 
INCREMENT BY 1;

/*==============================================================*/
/* TABLE: LABORATORIOS_RESULTADO                                */
/*==============================================================*/

CREATE TABLE HOSPITAL.LABORATORIOS_RESULTADO
(
  IDLABORESUL INT PRIMARY KEY,
  DSLABORESUL VARCHAR2(100) NOT NULL
);
/*Valor Unico en descripcion*/
ALTER TABLE HOSPITAL.LABORATORIOS_RESULTADO 
ADD CONSTRAINT UQ_LAB_RES_DSLABORESUL
UNIQUE (DSLABORESUL);
/*==============================================================*/
/* SECUENCIA: LABORATORIOS_RESULTADO                            */
/*==============================================================*/

CREATE SEQUENCE HOSPITAL.LABORESUL
START WITH 1
INCREMENT BY 1;

/*==============================================================*/
/* TABLE: LABORATORIOS_REQUISITO                                */
/*==============================================================*/

CREATE TABLE HOSPITAL.LABORATORIOS_REQUISITO
(
   IDLABOREQUI INT PRIMARY KEY,
   DSLABOREQUI VARCHAR2(100) NOT NULL
);
/*Valor Unico en descripcion*/
ALTER TABLE HOSPITAL.LABORATORIOS_REQUISITO 
ADD CONSTRAINT UQ_LAB_REQ_DSLABOREQUI
UNIQUE (DSLABOREQUI);
/*==============================================================*/
/* SECUENCIA: LABORATORIOS_REQUISITOS                           */
/*==============================================================*/
--DROP SEQUENCE HOSPITAL.LABOREQUISITO;
CREATE SEQUENCE HOSPITAL.LABOREQUISITO
START WITH 1
INCREMENT BY 1;

/*==============================================================*/
/* TABLE: LABORATORIOS_CABE                                     */
/*==============================================================*/
CREATE TABLE HOSPITAL.LABORATORIOS_CABE
(
   IDLABOCABE INT PRIMARY KEY,
   IDLABOTIPO INT NOT NULL,
   DSLABOCABE VARCHAR2(40) NOT NULL,
   FECHALABOCABE DATE NOT NULL,
   ACTIVO NUMBER (1) NOT NULL,
   CHECK(ACTIVO BETWEEN 0 AND 1),
   CONSTRAINT FK_LABORATO_REF_LAB_C_LABORATO FOREIGN KEY (IDLABOTIPO)
   REFERENCES HOSPITAL.LABORATORIOS_TIPO (IDLABOTIPO)
);
/*Valor Unico en descripcion*/
ALTER TABLE HOSPITAL.LABORATORIOS_CABE 
ADD CONSTRAINT UQ_LAB_REQ_DSLABOCABE
UNIQUE (DSLABOCABE);
/*==============================================================*/
/* SECUENCIA: LABORATORIOS_CABE                                 */
/*==============================================================*/
CREATE SEQUENCE HOSPITAL.LABOCABE
START WITH 1
INCREMENT BY 1 ; 

/*==============================================================*/
/* TABLE: LABORATORIOS_PRECIO                                   */
/*==============================================================*/
--DROP TABLE HOSPITAL.LABORATORIOS_PRECIO;
CREATE TABLE HOSPITAL.LABORATORIOS_PRECIO 
(
   IDLABOPRECIO INT PRIMARY KEY,
   IDLABOCABE INT NOT NULL,
   FECHAPRECIOLABO DATE NOT NULL,
   VALOR FLOAT(10) NOT NULL,
   ACTIVO NUMBER(1) NOT NULL,
   CHECK (ACTIVO BETWEEN 0 AND 1),
   CONSTRAINT FK_LABORATO_REF_CABE_LABORATO FOREIGN KEY(IDLABOCABE)
   REFERENCES HOSPITAL.LABORATORIOS_CABE(IDLABOCABE)
);

/*==============================================================*/
/* SECUENCIA: LABORATORIOS_PRECIO                               */
/*==============================================================*/
--DROP SEQUENCE HOSPITAL.PRECIOLABO;
CREATE SEQUENCE HOSPITAL.PRECIOLABO
START WITH 1
INCREMENT BY 1;

/*==============================================================*/
/* TABLE: LABORATORIOS_DETA                                     */
/*==============================================================*/
CREATE TABLE HOSPITAL.LABORATORIOS_DETA
(
   IDLABODETA INT PRIMARY KEY,
   IDLABOCABE INT NOT NULL,
   IDLABOREQUI INT NOT NULL,
  CONSTRAINT FK_LABORATO_REF_LAB_D_LABORATO FOREIGN KEY(IDLABOCABE)
  REFERENCES HOSPITAL.LABORATORIOS_CABE(IDLABOCABE),
  CONSTRAINT FK_LABORATO_REF_LABDE_LABORATO FOREIGN KEY(IDLABOREQUI)
  REFERENCES HOSPITAL.LABORATORIOS_REQUISITO(IDLABOREQUI)
);
/*Valor Unico en descripcion*/
ALTER TABLE HOSPITAL.LABORATORIOS_DETA 
ADD CONSTRAINT UQ_LAB_REQ_IDLABO_CAB_REQ
UNIQUE (IDLABOCABE,IDLABOREQUI);
/*==============================================================*/
/* SECUENCIA: LABORATORIOS_DETA                                 */
/*==============================================================*/
CREATE SEQUENCE HOSPITAL.LABODETA
START WITH 1
INCREMENT BY 1;

/*==============================================================*/
/* TABLE: LABORATORIOS_ORDEN                                     */
/*==============================================================*/
CREATE TABLE HOSPITAL.LABORATORIOS_ORDEN
(
  IDLABOORDEN INT PRIMARY KEY,  
  IDPACIENTE INT NOT NULL,
  FECHAORDEN DATE NOT NULL,
  ESTADO NUMBER(1) NOT NULL,
  CHECK (ESTADO BETWEEN 0 AND 1),
  CONSTRAINT FK_LAB_ORD_REF_LAB_ORD_PAC FOREIGN KEY(IDPACIENTE)
  REFERENCES HOSPITAL.HPTL_PACIENTES(ID),
  CONSTRAINT UQ_LAB_ORD_ID_ORD_PAC UNIQUE (IDLABOORDEN,IDPACIENTE)
);

/*==============================================================*/
/* SECUENCIA: LABORATORIOS_ORDEN                                */
/*==============================================================*/
CREATE SEQUENCE HOSPITAL.ORDENLABO
START WITH 1
INCREMENT BY 1;

/*==============================================================*/
/* TABLE: LABORATORIOS_RESUL_DETA                               */
/*==============================================================*/
CREATE TABLE HOSPITAL.LABORATORIOS_RESULTADO_DETA
(
  IDLABORESULDETA INT PRIMARY KEY,
  IDLABOCABE INT NOT NULL,
  IDLABORESUL INT NOT NULL,
  CONSTRAINT FK_LABORATO_REF_LABRE_LABORATO FOREIGN KEY(IDLABOCABE) 
  REFERENCES HOSPITAL.LABORATORIOS_CABE(IDLABOCABE),
  CONSTRAINT FK_LABORATO_REF_LAB2_LABORATO FOREIGN KEY(IDLABORESUL)
  REFERENCES HOSPITAL.LABORATORIOS_RESULTADO(IDLABORESUL)
);
/*Valor Unico en descripcion*/
ALTER TABLE HOSPITAL.LABORATORIOS_RESULTADO_DETA 
ADD CONSTRAINT UQ_LAB_REQ_IDLABO_CAB_RES
UNIQUE (IDLABOCABE,IDLABORESUL);
/*==============================================================*/
/* SECUENCIA: LABORATORIOS_RESUL_DETA                           */
/*==============================================================*/
CREATE SEQUENCE HOSPITAL.LABORESULDETA
START WITH 1
INCREMENT BY 1;

/*==============================================================*/
/* TABLE: LABORATORIO_RESULTADO_CABE                            */
/*==============================================================*/
CREATE TABLE HOSPITAL.LABORATORIOS_RESULTADO_CABE 
(
   IDLABORESULCABE INT PRIMARY KEY,
   IDLABORESULDETA INT NOT NULL,
   IDLABOORDEN INT NOT NULL,
   FECHALABORESULCABE DATE NOT NULL,
   CONSTRAINT FK_LABORATO_REF_LAB_R_LABORATO FOREIGN KEY(IDLABORESULDETA)
   REFERENCES HOSPITAL.LABORATORIOS_RESULTADO_DETA(IDLABORESULDETA),
  CONSTRAINT FK_LABORATO_REF_LAB_R_ORDEN_LA FOREIGN KEY(IDLABOORDEN)
  REFERENCES HOSPITAL.LABORATORIOS_ORDEN(IDLABOORDEN)
);

/*==============================================================*/
/* SECUENCIA: LABORATORIOS_RESULTADO_CABE                       */
/*==============================================================*/

CREATE SEQUENCE HOSPITAL.LABORESULTADOCABE
START WITH 1
INCREMENT BY 1;

/*==============================================================*/
/* TABLE: LABORATORIOS_RESULTADO_ORDEN                          */
/*==============================================================*/
--DROP TABLE HOSPITAL.LABORATORIOS_RESULTADO_ORDEN ;
CREATE TABLE HOSPITAL.LABORATORIOS_RESULTADO_ORDEN 
(
   IDLABORESULORDEN INT PRIMARY KEY,
   IDLABORESULCABE INT NOT NULL,
   VALOR VARCHAR2(100) NOT NULL,
   CONSTRAINT FK_LABORATO_REF_LAB1_LABORATO FOREIGN KEY(IDLABORESULCABE)
   REFERENCES HOSPITAL.LABORATORIOS_RESULTADO_CABE(IDLABORESULCABE)
);
 
/*==============================================================*/
/* SECUENCIA: LABORATORIOS_RESULTADO_ORDEN                      */
/*==============================================================*/
--DROP SEQUENCE  HOSPITAL.LABORESULORDEN;
CREATE SEQUENCE HOSPITAL.LABORESULORDEN
START WITH 1
INCREMENT BY 1;


/*==============================================================*/
/* TABLE: LABORATORIOS_ORDEN_DETALLE                                     */
/*==============================================================*/
CREATE TABLE HOSPITAL.LABORATORIOS_ORDEN_DETA
(
  IDLABOORDENDETA INT PRIMARY KEY,  
  IDLABOORDEN INT NOT NULL,  
  IDLABOCABE INT NOT NULL,
  CONSTRAINT FK_LAB_ORD_DET_REF_LAB_ORD FOREIGN KEY(IDLABOORDEN)
  REFERENCES HOSPITAL.LABORATORIOS_ORDEN (IDLABOORDEN),
  CONSTRAINT FK_LAB_ORD_DET_REF_LAB_CAB FOREIGN KEY(IDLABOCABE)
  REFERENCES HOSPITAL.LABORATORIOS_CABE (IDLABOCABE),
  CONSTRAINT UQ_LAB_ORD_DETA_IDLAB_ORD_CAB UNIQUE (IDLABOORDEN,IDLABOCABE)
);

/*==============================================================*/
/* SECUENCIA: LABORATORIOS_ORDEN_DETA                           */
/*==============================================================*/
CREATE SEQUENCE HOSPITAL.ORDENLABODETA
START WITH 1
INCREMENT BY 1;
-- SECUENCIAS PARA IDs (TABLAS GENERALES)

CREATE SEQUENCE HOSPITAL.HPTL_PERSONAS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_TELEFONOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_PERSONAS_TELEFONOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_TIPO_SANGRE_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_PACIENTES_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_EMPLEADOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_DOCTORES_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_ESPECIALIDADES_DOC_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_DOC_ESPECIALIDAD_DOC_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_PUESTOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_EMPLEADOS_PUESTOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_AREAS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_PUESTOS_AREAS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_HORARIOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_TIPO_ENFERMEDADES_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_ENFERMEDADES_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_PAISES_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_DEPARTAMENTOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_MUNICIPIOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_DIRECCIONES_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_CLINICAS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_MEDICAMENTOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_TIPOS_EXAMENES_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_EXAMENES_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_TIPOS_EQUIPOS_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_EQUIPOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_TIPO_DOCUMENTOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_PERSONA_DOCTO_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_DOCUMENTOS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE

CREATE SEQUENCE HOSPITAL.HPTL_PERFILES_SEQ  INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE HOSPITAL.HPTL_USUARIOS_SEQ  INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE HOSPITAL.HPTL_ROLES_SEQ  INCREMENT BY 1 START WITH 1;

-- SECUENCIAS PARA IDs (TABLAS GRUPO #2)

CREATE SEQUENCE HOSPITAL.HPTL_CITAS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE;

CREATE SEQUENCE HOSPITAL.HPTL_HIS_MEDICA_DETA_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE;

CREATE SEQUENCE HOSPITAL.HPTL_RECETAS_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE;

CREATE SEQUENCE HOSPITAL.HPTL_RECETA_MEDICAMENTO_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE;

CREATE SEQUENCE HOSPITAL.HPTL_BITCNSEXT_SEQ 
INCREMENT BY 1
START WITH 1
NOMAXVALUE;


--SECUENCIAS PARA IDs (Tablas del Grupo#10)

CREATE SEQUENCE SEQ_EMPRESA
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

CREATE SEQUENCE SEQ_EMPRESA_CLINICA
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

CREATE SEQUENCE SEQ_EMPO_EMP_CLI
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

CREATE SEQUENCE SEQ_TURNO
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

CREATE SEQUENCE SEQ_TURNO_EMPLEADO
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

CREATE SEQUENCE SEQ_DIRECCION_EMPLEADO
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

CREATE SEQUENCE SEQ_MOV_ADMIN
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

CREATE SEQUENCE SEQ_DET_MOV_ADMIN
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

CREATE SEQUENCE SEQ_BITACORA
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

------- TRIGGERS GRUPO #6 ---

CREATE TABLE HOSPITAL.lab_bitacora
(idbita number(20),
 tabla varchar2(30),
 idcampo  number(30),
 campo  varchar2(30),
 valorant  varchar2(100),
 valornue  varchar2(100),
 fechabita date,
 userbita  varchar2(30),
 accion varchar2(30)
);

--alter table LAB_BITACORA add ACCION varchar2(30);

CREATE SEQUENCE HOSPITAL.SEQ_BITA
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 99999999999999999999;

create or replace PROCEDURE HOSPITAL.PRC_BITACORA(NTABLA VARCHAR2, NIDCAMPO NUMBER, NCAMPO VARCHAR2,NVALORANT VARCHAR2, NVALORNUE VARCHAR2, NACCION VARCHAR2)
AS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO HOSPITAL.LAB_BITACORA(idbita, tabla, idcampo, campo, valorant, valornue, fechabita, userbita, accion)
    VALUES (HOSPITAL.SEQ_BITA.NEXTVAL, NTABLA, NIDCAMPO, NCAMPO, NVALORANT, NVALORNUE, SYSDATE, USERENV('CLIENT_INFO'),NACCION);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001,'ERROR INSERTANDO BITACORA'||sqlerrm);
END;

/*Bitacora Laboratorios Cabecera*/
create or replace TRIGGER HOSPITAL.TRG_BIR_LABO_CABE
BEFORE INSERT OR UPDATE ON HOSPITAL.LABORATORIOS_CABE
REFERENCING NEW AS NEW
FOR EACH ROW
DECLARE
INFO_EXCEPCION EXCEPTION;
BEGIN
  /*CAMBIOS EN DESCRIPCION*/
  IF INSERTING AND :OLD.DSLABOCABE IS NULL THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_CABE', :NEW.IDLABOCABE, 'DSLABOCABE', :OLD.DSLABOCABE, :NEW.DSLABOCABE,'INGRESA');
  ELSIF UPDATING AND :NEW.DSLABOCABE != :OLD.DSLABOCABE THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_CABE', :NEW.IDLABOCABE, 'DSLABOCABE', :OLD.DSLABOCABE, :NEW.DSLABOCABE, 'MODIFICA');
  ELSIF DELETING AND :NEW.DSLABOCABE IS NULL THEN
    HOSPITAL.PRC_BITACORA( 'LABORATORIOS_CABE', :NEW.IDLABOCABE, 'DSLABOCABE', :OLD.DSLABOCABE, :NEW.DSLABOCABE, 'ELIMINA');
  END IF;
  /*CAMBIOS EN ACTIVO*/
  IF INSERTING AND :OLD.ACTIVO IS NULL THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_CABE', :NEW.IDLABOCABE, 'ACTIVO', :OLD.ACTIVO, :NEW.ACTIVO,'INGRESA');
  ELSIF UPDATING AND :NEW.ACTIVO != :OLD.ACTIVO THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_CABE', :NEW.IDLABOCABE, 'ACTIVO', :OLD.ACTIVO, :NEW.ACTIVO,'MODIFICA');
  ELSIF DELETING AND :NEW.ACTIVO IS NULL THEN
    HOSPITAL.PRC_BITACORA( 'LABORATORIOS_CABE', :NEW.IDLABOCABE, 'ACTIVO', :OLD.ACTIVO, :NEW.ACTIVO,'ELIMINA');
  END IF;
EXCEPTION
WHEN INFO_EXCEPCION THEN
       HOSPITAL.PRC_BITACORA('LABORATORIOS_CABE',:NEW.IDLABOCABE, 'ERROR INSERTANDO BITACORA', NULL, NULL,'ERROR');
       RAISE_APPLICATION_ERROR (-20001, 'Error '||SQLERRM);
END;

/*Bitacora Laboratorios Detalle*/
create or replace TRIGGER HOSPITAL.TRG_BIR_LABO_DETA
BEFORE INSERT OR UPDATE OR DELETE ON HOSPITAL.LABORATORIOS_DETA
REFERENCING NEW AS NEW
FOR EACH ROW
DECLARE
INFO_EXCEPCION EXCEPTION;
BEGIN	
  /*CAMBIOS EN CABECERA DE LABORATORIOS*/
  IF INSERTING  AND :OLD.IDLABOCABE IS NULL THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_DETA', :NEW.IDLABODETA, 'IDLABOCABE', :OLD.IDLABOCABE, :NEW.IDLABOCABE, 'INGRESA');
  ELSIF UPDATING AND :NEW.IDLABOCABE != :OLD.IDLABOCABE THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_DETA', :NEW.IDLABODETA, 'IDLABOCABE', :OLD.IDLABOCABE, :NEW.IDLABOCABE, 'MODIFICA');
  ELSIF DELETING AND :NEW.IDLABOCABE IS NULL THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_DETA', :NEW.IDLABODETA, 'IDLABOCABE', :OLD.IDLABOCABE, :NEW.IDLABOCABE, 'ELIMINA');
  END IF;
  /*CAMBIOS EN ID DE LABORATORIO REQUISITO*/
  IF INSERTING  AND :OLD.IDLABOREQUI IS NULL THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_DETA', :NEW.IDLABODETA, 'IDLABOREQUI', :OLD.IDLABOREQUI, :NEW.IDLABOREQUI, 'INGRESA');
  ELSIF UPDATING AND :NEW.IDLABOREQUI != :OLD.IDLABOREQUI THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_DETA', :NEW.IDLABODETA, 'IDLABOREQUI', :OLD.IDLABOREQUI, :NEW.IDLABOREQUI, 'MODIFICA');
  ELSIF DELETING AND :NEW.IDLABOREQUI IS NULL THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_DETA', :NEW.IDLABODETA, 'IDLABOREQUI', :OLD.IDLABOREQUI, :NEW.IDLABOREQUI, 'ELIMINA');
  END IF;  
EXCEPTION
WHEN INFO_EXCEPCION THEN
       HOSPITAL.PRC_BITACORA('LABORATORIOS_DETA',:NEW.IDLABODETA, 'ERROR INSERTANDO BITACORA', NULL, NULL,'ERROR');
       RAISE_APPLICATION_ERROR (-20001, 'Error '||SQLERRM);
END;

/*Bitacora Laboratorios Requisitos*/
create or replace TRIGGER HOSPITAL.TRG_BIR_LABO_REQU
BEFORE INSERT OR UPDATE OR DELETE ON HOSPITAL.LABORATORIOS_REQUISITO
REFERENCING NEW AS NEW
FOR EACH ROW
DECLARE
INFO_EXCEPCION EXCEPTION;
BEGIN	
  /*CAMBIOS EN ID DE REQUISITOS DE LABORATORIO*/
  IF INSERTING  THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_REQUISITO', :NEW.IDLABOREQUI, 'DSLABOREQUI', :OLD.DSLABOREQUI, :NEW.DSLABOREQUI, 'INGRESA');
  ELSIF UPDATING AND :NEW.DSLABOREQUI != :OLD.DSLABOREQUI THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_REQUISITO', :NEW.IDLABOREQUI, 'DSLABOREQUI', :OLD.DSLABOREQUI, :NEW.DSLABOREQUI, 'MODIFICA');
  ELSIF DELETING THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_REQUISITO', :NEW.IDLABOREQUI, 'DSLABOREQUI', :OLD.DSLABOREQUI, :NEW.DSLABOREQUI, 'ELIMINA');
  END IF;
EXCEPTION
WHEN INFO_EXCEPCION THEN
       HOSPITAL.PRC_BITACORA('LABORATORIOS_REQUISITO',:NEW.IDLABOREQUI, 'ERROR INSERTANDO BITACORA', NULL, NULL,'ERROR');
       RAISE_APPLICATION_ERROR (-20001, 'Error '||SQLERRM);
END;

/*Bitacora Laboratorios Reesultados */
create or replace TRIGGER HOSPITAL.TRG_BIR_LABO_RESUL
BEFORE INSERT OR UPDATE OR DELETE ON HOSPITAL.LABORATORIOS_RESULTADO
REFERENCING NEW AS NEW
FOR EACH ROW
DECLARE
INFO_EXCEPCION EXCEPTION;
BEGIN	
  /*CAMBIOS EN ID DE REQUISITOS DE LABORATORIO*/
  IF INSERTING  THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO', :NEW.IDLABORESUL, 'DSLABORESUL', :OLD.DSLABORESUL, :NEW.DSLABORESUL, 'INGRESA');
  ELSIF UPDATING AND :NEW.DSLABORESUL != :OLD.DSLABORESUL THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO', :NEW.IDLABORESUL, 'DSLABORESUL', :OLD.DSLABORESUL, :NEW.DSLABORESUL, 'MODIFICA');
  ELSIF DELETING THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO', :NEW.IDLABORESUL, 'DSLABORESUL', :OLD.DSLABORESUL, :NEW.DSLABORESUL, 'ELIMINA');
  END IF;
EXCEPTION
WHEN INFO_EXCEPCION THEN
       HOSPITAL.PRC_BITACORA('LABORATORIOS_RESULTADO',:NEW.IDLABORESUL, 'ERROR INSERTANDO BITACORA', NULL, NULL,'ERROR');
       RAISE_APPLICATION_ERROR (-20001, 'Error '||SQLERRM);
END;

/*Bitacora Laboratorios Resultados Cabecera */
create or replace TRIGGER HOSPITAL.TRG_BIR_LABO_RESU_CABE
BEFORE INSERT OR UPDATE OR DELETE ON HOSPITAL.LABORATORIOS_RESULTADO_CABE
REFERENCING NEW AS NEW
FOR EACH ROW
DECLARE
INFO_EXCEPCION EXCEPTION;
BEGIN	
  /*CAMBIOS EN ID ITEM DETALLE RESULTADOS LABORATORIOS*/
  IF INSERTING  AND :OLD.IDLABORESULDETA IS NULL THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_CABE', :NEW.IDLABORESULCABE, 'IDLABORESULDETA', :OLD.IDLABORESULDETA, :NEW.IDLABORESULDETA, 'INGRESA');
  ELSIF UPDATING AND :NEW.IDLABORESULDETA != :OLD.IDLABORESULDETA THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_CABE', :NEW.IDLABORESULCABE, 'IDLABORESULDETA', :OLD.IDLABORESULDETA, :NEW.IDLABORESULDETA, 'MODIFICA');
  ELSIF DELETING AND :NEW.IDLABORESULDETA IS NULL THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_CABE', :NEW.IDLABORESULCABE, 'IDLABORESULDETA', :OLD.IDLABORESULDETA, :NEW.IDLABORESULDETA, 'ELIMINA');
  END IF;
  /*CAMBIOS EN ID DE ORDEN RESULTADOS LABORATORIOS*/
  IF INSERTING  AND :OLD.IDLABOORDEN IS NULL THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_CABE', :NEW.IDLABORESULCABE, 'IDLABOORDEN', :OLD.IDLABOORDEN, :NEW.IDLABOORDEN, 'INGRESA');
  ELSIF UPDATING AND :NEW.IDLABOORDEN != :OLD.IDLABOORDEN THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_CABE', :NEW.IDLABORESULCABE, 'IDLABOORDEN', :OLD.IDLABOORDEN, :NEW.IDLABOORDEN, 'MODIFICA');
  ELSIF DELETING AND :NEW.IDLABOORDEN IS NULL THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_CABE', :NEW.IDLABORESULCABE, 'IDLABOORDEN', :OLD.IDLABOORDEN, :NEW.IDLABOORDEN, 'ELIMINA');
  END IF;  
EXCEPTION
WHEN INFO_EXCEPCION THEN
       HOSPITAL.PRC_BITACORA('LABORATORIOS_RESULTADO_CABE',:NEW.IDLABORESULCABE, 'ERROR INSERTANDO BITACORA', NULL, NULL,'ERROR');
       RAISE_APPLICATION_ERROR (-20001, 'Error '||SQLERRM);
END;

/*Bitacora Laboratorios Resultados Orden */
create or replace TRIGGER HOSPITAL.TRG_BIR_LABO_RESU_ORDE
BEFORE INSERT OR UPDATE OR DELETE ON HOSPITAL.LABORATORIOS_RESULTADO_ORDEN
REFERENCING NEW AS NEW
FOR EACH ROW
DECLARE
INFO_EXCEPCION EXCEPTION;
BEGIN	
  /*CAMBIOS EN ID DE LABORATORIO CABECERA*/
  IF INSERTING  AND :OLD.IDLABORESULCABE IS NULL THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_ORDEN', :NEW.IDLABORESULORDEN, 'IDLABORESULCABE', :OLD.IDLABORESULCABE, :NEW.IDLABORESULCABE, 'INGRESA');
  ELSIF UPDATING AND :NEW.IDLABORESULCABE != :OLD.IDLABORESULCABE THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_ORDEN', :NEW.IDLABORESULORDEN, 'IDLABORESULCABE', :OLD.IDLABORESULCABE, :NEW.IDLABORESULCABE, 'MODIFICA');
  ELSIF DELETING AND :NEW.IDLABORESULCABE IS NULL THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_ORDEN', :NEW.IDLABORESULORDEN, 'IDLABORESULCABE', :OLD.IDLABORESULCABE, :NEW.IDLABORESULCABE, 'ELIMINA');
  END IF;
  /*CAMBIOS EN ID ITEM RESULTADOS LABORATORIOS*/
  IF INSERTING  AND :OLD.VALOR IS NULL THEN
     HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_ORDEN', :NEW.IDLABORESULORDEN, 'VALOR', :OLD.VALOR, :NEW.VALOR, 'INGRESA');
  ELSIF UPDATING AND :NEW.VALOR != :OLD.VALOR THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_ORDEN', :NEW.IDLABORESULORDEN, 'VALOR', :OLD.VALOR, :NEW.VALOR, 'MODIFICA');
  ELSIF DELETING AND :NEW.VALOR IS NULL THEN
      HOSPITAL.PRC_BITACORA( 'LABORATORIOS_RESULTADO_ORDEN', :NEW.IDLABORESULORDEN, 'VALOR', :OLD.VALOR, :NEW.VALOR, 'ELIMINA');
  END IF;  
EXCEPTION
WHEN INFO_EXCEPCION THEN
       HOSPITAL.PRC_BITACORA('LABORATORIOS_RESULTADO_ORDEN',:NEW.IDLABORESULORDEN, 'ERROR INSERTANDO BITACORA', NULL, NULL,'ERROR');
       RAISE_APPLICATION_ERROR (-20001, 'Error '||SQLERRM);
END;



--- VISTAS GRUPO # 6 --

/*VISTA LABORATORIOS PARA CONSULTAS FRONT-END*/
CREATE VIEW HOSPITAL.LAB_VW_LABS 
AS
SELECT  LC.IDLABOCABE, LC.DSLABOCABE,LC.IDLABOTIPO,LT.DSLABOTIPO,
TO_DATE(LC.FECHALABOCABE, 'DD/MM/YYYY') as FECHALABOCABE,LC.ACTIVO
FROM HOSPITAL.LABORATORIOS_CABE LC, HOSPITAL.LABORATORIOS_TIPO LT
WHERE  LC.IDLABOTIPO = LT.IDLABOTIPO
ORDER BY LC.DSLABOCABE ASC;
--SELECT * FROM LAB_VW_LABS;

/*VISTA DETALLE DE LABORATORIOS PARA CONSULTAS FRONT-END*/
CREATE VIEW HOSPITAL.LAB_VW_LABSDETAREQUI 
AS
SELECT LD.IDLABODETA,LD.IDLABOCABE,LD.IDLABOREQUI,LC.DSLABOCABE,LR.DSLABOREQUI 
FROM HOSPITAL.LABORATORIOS_DETA LD,HOSPITAL.LABORATORIOS_CABE LC,HOSPITAL.LABORATORIOS_REQUISITO LR
WHERE LD.IDLABOCABE = LC.IDLABOCABE
AND LD.IDLABOREQUI = LR.IDLABOREQUI
ORDER BY LC.DSLABOCABE , LR.DSLABOREQUI ASC;

/*VISTA DE PACIENTES - PERSONAS FRONT-END*/
CREATE VIEW HOSPITAL.LAB_VW_PER_PAC
AS
SELECT PA.ID AS IDPACIENTE,PE.PRIMER_NOMBRE||' '||PE.PRIMER_APELLIDO AS DSPACIENTE
FROM HOSPITAL.HPTL_PACIENTES PA
INNER JOIN HPTL_PERSONAS PE
ON PA.PERSONAS_ID = PE.ID
ORDER BY DSPACIENTE ASC;

/*VISTA ORDEN DE LABORATORIOS PARA CONSULTAS FRONT-END*/
CREATE VIEW HOSPITAL.LAB_VW_LABORDPAC
AS
SELECT OL.IDLABOORDEN,PA.CODIGO_PACIENTE,TO_DATE(OL.FECHAORDEN, 'DD/MM/YYYY') AS FECHAORDEN,OL.ESTADO
FROM HOSPITAL.LABORATORIOS_ORDEN OL,HOSPITAL.HPTL_PACIENTES PA
WHERE OL.IDPACIENTE = PA.ID
ORDER BY OL.IDLABOORDEN ASC;
